name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  pre-commit:
    name: pre-commit (hooks)
    runs-on: debian-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Install pre-commit
        run: |
          python -m pip install --upgrade pip
          python -m pip install pre-commit
      - name: Run pre-commit on all files
        run: pre-commit run --all-files

  tests:
    name: Tests (pytest • Python ${{ matrix.python-version }} • ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [debian-latest, macos-latest, windows-latest]
        python-version: ["3.8", "3.13"]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install test dependencies and project
        run: |
          python -m pip install --upgrade pip
          python -m pip install .[test]

      - name: Run pytest with coverage
        run: |
          pytest --cov=schema_dataclass --cov-report=term-missing --cov-report=xml --cov-report=html:htmlcov

  hatch-build-test:
    name: Hatch build (Python ${{ matrix.python-version }} • ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [debian-latest, macos-latest, windows-latest]
        python-version: ["3.8", "3.13"]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Build with hatchling backend via PEP 517 (python -m build)
        run: |
          python -m pip install --upgrade pip
          python -m pip install build twine
          python -c "import os, shutil; d='dist'; shutil.rmtree(d) if os.path.isdir(d) else None"
          python -m build --sdist --wheel

      - name: Twine check metadata
        run: python -m twine check dist/*

      - name: Install built wheel and smoke import
        run: |
          #!/bin/bash
          # 查找 wheel 文件
          if [ -z "$(ls dist/*.whl 2>/dev/null)" ]; then
            echo "❌ No wheel file found in dist directory"
            exit 1
          fi

          WHEEL_FILE=$(ls dist/*.whl | head -1)
          echo "📦 Found wheel: $WHEEL_FILE"

          # 安装 wheel
          python -m pip install --force-reinstall "$WHEEL_FILE"

          # 验证导入
          python -c "
          import importlib.util
          import sys

          spec = importlib.util.find_spec('schema_dataclass')
          print(f'import_ok= {bool(spec)}')

          if spec:
              try:
                  import schema_dataclass as m
                  exports = [a for a in dir(m) if a in ('Field', 'dataclass', 'fields')]
                  print(f'exports= {exports}')
                  
                  # 验证关键导出项
                  missing = [e for e in ['Field', 'dataclass', 'fields'] if e not in exports]
                  if missing:
                      print(f'❌ Missing expected exports: {missing}', file=sys.stderr)
                      sys.exit(1)
              except Exception as e:
                  print(f'❌ Import failed: {str(e)}', file=sys.stderr)
                  sys.exit(1)
          else:
              print('❌ Module not found', file=sys.stderr)
              sys.exit(1)
          "
        shell: bash

  uv-build-test:
    name: uv build (Python ${{ matrix.python-version }} • ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [debian-latest, macos-latest, windows-latest]
        python-version: ["3.8", "3.13"]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      # 关键步骤：安装 uv
      - name: Set up uv
        uses: astral-sh/setup-uv@v2  # 官方推荐方式 [[6]]
        

      - name: Build with uv
        run: |
          python -c "import os, shutil; d='dist'; shutil.rmtree(d) if os.path.isdir(d) else None"
          uv build

      - name: Twine check metadata
        run: |
          python -m pip install --upgrade pip
          python -m pip install twine
          python -m twine check dist/*

      - name: Install built wheel and smoke import
        run: |
          #!/bin/bash
          # 查找 wheel 文件
          if [ -z "$(ls dist/*.whl 2>/dev/null)" ]; then
            echo "❌ No wheel file found in dist directory"
            exit 1
          fi

          WHEEL_FILE=$(ls dist/*.whl | head -1)
          echo "📦 Found wheel: $WHEEL_FILE"

          # 安装 wheel
          python -m pip install --force-reinstall "$WHEEL_FILE"

          # 验证导入
          python -c "
          import importlib.util
          import sys

          spec = importlib.util.find_spec('schema_dataclass')
          print(f'import_ok= {bool(spec)}')

          if spec:
              try:
                  import schema_dataclass as m
                  exports = [a for a in dir(m) if a in ('Field', 'dataclass', 'fields')]
                  print(f'exports= {exports}')
                  
                  # 验证关键导出项
                  missing = [e for e in ['Field', 'dataclass', 'fields'] if e not in exports]
                  if missing:
                      print(f'❌ Missing expected exports: {missing}', file=sys.stderr)
                      sys.exit(1)
              except Exception as e:
                  print(f'❌ Import failed: {str(e)}', file=sys.stderr)
                  sys.exit(1)
          else:
              print('❌ Module not found', file=sys.stderr)
              sys.exit(1)
          "
        shell: bash
