name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  lint:
    name: Lint (black)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install uv (for lint)
        shell: bash
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
          uv --version || true

      - name: Install linters
        run: |
          python -m pip install --upgrade pip
          python -m pip install black

      - name: Black check
        run: black --check .

  pre-commit:
    name: pre-commit (hooks)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Install pre-commit
        run: |
          python -m pip install --upgrade pip
          python -m pip install pre-commit
      - name: Run pre-commit on all files
        run: pre-commit run --all-files

  tests:
    name: Tests (pytest • Python ${{ matrix.python-version }} • ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.8", "3.12"]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install test dependencies and project
        run: |
          python -m pip install --upgrade pip
          python -m pip install .[test]

      - name: Run pytest with coverage
        run: |
          pytest --cov=schemas_dataclass --cov-report=term-missing --cov-report=xml --cov-report=html:htmlcov

  hatch-build-test:
    name: Hatch build (Python ${{ matrix.python-version }} • ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.8", "3.12"]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Build with hatchling backend via PEP 517 (python -m build)
        run: |
          python -m pip install --upgrade pip
          python -m pip install build twine
          python -c "import os, shutil; d='dist'; shutil.rmtree(d) if os.path.isdir(d) else None"
          python -m build --sdist --wheel

      - name: Twine check metadata
        run: python -m twine check dist/*

      - name: Install built wheel and smoke import
        run: |
          python -m pip install dist/*.whl
          python - <<'PY'
          import importlib.util
          spec = importlib.util.find_spec('schemas_dataclass')
          print('import_ok=', bool(spec))
          import schemas_dataclass as m
          print('exports=', [a for a in dir(m) if a in ('Field','dataclass','fields')])
          PY

  uv-build-test:
    name: uv build (Python ${{ matrix.python-version }} • ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.8", "3.12"]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install uv
        shell: bash
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
          uv --version || true

      - name: Build with uv
        run: |
          python -c "import os, shutil; d='dist'; shutil.rmtree(d) if os.path.isdir(d) else None"
          uv build

      - name: Twine check metadata
        run: |
          python -m pip install --upgrade pip
          python -m pip install twine
          python -m twine check dist/*

      - name: Install built wheel and smoke import
        run: |
          python -m pip install dist/*.whl
          python - <<'PY'
          import importlib.util
          spec = importlib.util.find_spec('schemas_dataclass')
          print('import_ok=', bool(spec))
          import schemas_dataclass as m
          print('exports=', [a for a in dir(m) if a in ('Field','dataclass','fields')])
          PY


